.. _provisioners:

Provisioners
============

.. toctree::
    :maxdepth: 2

Introduction
------------

* Cloud Deploy can use any combination of Ansible and Saltstack provisioners to build AMIs.
* Each Cloud Deploy feature is a Saltstack formula or an Ansible role.
* Saltstack is enabled by default to build AMIs.
* Provisioners configurations are managed in the Cloud Deploy configuration file.
* Cloud Deploy uses git repositories to get provisioners' code.
* Cloud Deploy needs access to each git repositories with at least a read permission.
* In the WebUI, each feature variable can be filled with an input field. Entreprise_License_.

How to configure a Saltstack provisioner feature
------------------------------------------------

A Saltstack provisioner feature is basically a Saltstack formula that takes 2 arguments:

* The formula's name
* The input variable to set

A formula that takes more than one variable has to be declared multiple times.

For example, using a formula that installs package using a package variable as input has to be declared this way:

+--------------+---------------------------------+
| Feature Name | Feature Value                   |
+==============+=================================+
| pkg          | package=htop                    |
+--------------+---------------------------------+
| pkg          | package=nginx                   |
+--------------+---------------------------------+

**Note:** To pass multiple values for the same variable the feature has to be delared multiple times.

The feature's name will be mapped to a Saltstack formula's name and the feature's value will be mapped to a Saltstack pillar. The following files should be generated by Cloud Deploy:

*Sample salt/top.sls*

.. code-block:: yaml

    base:
      '*':
        - common
        - pkg

**Note:** The ``common`` formula is included by default, this formula should contain some system upgrade or common packages installation for all buildd AMI's.

*Sample pillar/top.sls*

.. code-block:: yaml

    base:
      '*':
        - features
        - mypillar

**Note:** An additional pillar file can be added to load common variables for example here ``mypillar``, see additional_pillar_.

*Sample pillar/features.sls*

.. code-block:: yaml

    pkg:
      version: ''
      package:
        - htop
        - nginx

**Note:** By default a feature that has no variable name is mapped to a variable ``version``, this is a legacy behavior.

How to configure Saltstack provisioner repository
-------------------------------------------------

Use the ``features_provisioners`` section of the Cloud Deploy configuration file to declare the repository and the tag to use as follow

.. code-block:: yaml

    features_provisioners:
        salt:
            git_repo: git@bitbucket.org:myaccount/my-salt-formulas.git
            git_revision: v1.0.0

.. _additional_pillar:

Additional pillar file can be loaded using the ``salt_additonal_pillar`` propertie as follow in the ``salt`` section

.. code-block:: yaml

    salt_additional_pillar: mypillar

**Note:** A ``pillar/mypillar.sls`` must exist in the Saltstack repository if an additionnal pillar is set.

The Saltstack provisioner can use only one repository at a time containing all the saltstack hierarchy as follow

.. code-block:: sh

    my-salt-formulas/
    |_salt/
    | |_nginx/
    | |_apache/
    |_pillar/
    | |_top.sls
    | |_mypillar.sls
    |_top.sls

The Cloud Deploy WebUI uses a json inventory to expose a list of available formulas that use a json_form plugin. The url of this file can be set using the ``salt_role_inventory_url`` property. Entreprise_License_.

Here is an example of json inventory:

.. code-block:: json

    [
      "nginx",
      "apache",
      "mysql"
    ]



How to configure an Ansible provisioner feature
-----------------------------------------------

An Ansible provisioner feature is basically an Ansible role that takes 2 arguments:

* The role's name
* The input yml document to pass as variable

A role can take a complex variable structure.

For example, using a role that installs package using a complex variable structure as input as to be declared this way:

+--------------+-------------------------------------+
| Feature Name | Feature Value                       |
+==============+=====================================+
| apt          | .. code-block:: yaml                |
|              |                                     |
|              |     apt_autoremove: true            |
|              |     apt_force: false                |
|              |     apt_install_recommends: false   |
|              |     apt_packages:                   |
|              |     - {name: apache2}               |
|              |     - {name: htop}                  |
|              |     apt_repositories:               |
|              |     - {update_cache: false}         |
|              |     apt_upgrade: false              |
+--------------+-------------------------------------+

How to configure Ansible provisioner repository
-----------------------------------------------

Use the ``features_provisioners`` section of the Cloud Deploy configuration file to declare the repository and the tag to use as follow

.. code-block:: yaml

    features_provisioners:
        ansible:
            git_repo: git@bitbucket.org:myaccount/my-ansible-galaxy-requirement.git
            git_revision: v1.0.0

**Note:** the repository must have a yaml file containing the role catalog as Ansible Galaxy requirement file https://docs.ansible.com/ansible/latest/reference_appendices/galaxy.html#installing-multiple-roles-from-a-file

Here is an example of requirement file:

.. code-block:: yaml

    # from galaxy
    - src: yatesr.timezone
    
    # from GitHub
    - src: https://github.com/bennojoy/nginx
    
    # from GitHub, overriding the name and specifying a specific tag
    - src: https://github.com/bennojoy/nginx
      version: master
      name: nginx_role

    # from a webserver, where the role is packaged in a tar.gz
    - src: https://some.webserver.example.com/files/master.tar.gz
      name: http-role
    
    # from Bitbucket
    - src: git+http://bitbucket.org/willthames/git-ansible-galaxy
      version: v1.4

The name and path of the requirement file is  ``requirements.yml`` by default but can be overrided using the property ``ansible_galaxy_requirements_path``.

Cloud Deploy uses a base playbook executed at each BuildImage. This playbook usually contains upgrades commands and base package installation. The path of the requirement file and the path of the base playbook file can be set using the following properties ``base_playbook_requirements_file`` and ``base_playbook_file``.

The Cloud Deploy WebUI uses a json inventory to create a dynamic form with the roles variables that use a json_form plugin. The url of this file can be set using the propertie ``ansible_role_inventory_url``. Entreprise_License_.

Here is an example of json inventory:

.. code-block:: json

    [
      {
        "name": "package",
        "type": "object",
        "properties":
        {
          "package_name":
          {
            "title": "Package name, or package specifier with version, like name-1.0",
            "type": "array",
            "items":
            {
              "type": "string"
            }
          }
        }
      }
    ]

.. _Entreprise_License:

**Note:** The WebUI is available only for Claranet customers or with Enterprise license.
