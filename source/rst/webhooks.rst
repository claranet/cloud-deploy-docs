.. title:: Webhooks integration

.. toctree::
    :maxdepth: 2


.. _webhooks:

Webhooks integration
====================

Webhooks allow you to easily automate your deployment workflows using Cloud Deploy (Ghost)!

Create a webhook configuration using Cloud Deploy UI:
-----------------------------------------------------

    1. Create a webhook configuration on Cloud Deploy webhooks page.
    2. Fill the form:

        * Application ID: select the Cloud Deploy application to use,
        * Module name: select the appropriate module, it must correspond to the git repository you will use to trigger the webhook
        * Revision regex: regex must match expected revision. This can be a branch, a tag or a specific commit hash
        * Secret token: strengthen security by adding a token of your choice (supported on Github and Gitlab),
        * Events: all events that should trigger the webhook. By default the ``push`` event should be enough for most scenarios
        * Command to run: deploy, all other fields are depending on the command to run.

    3. Create a wehbook on the external service you are using to trigger webhooks (Github, for instance). You'll need to copy paste the URL generated by Cloud Deploy.
    4. (Optional) Whitelist IP adresses from the webhook service you are using. Refer to Providers section for more information about those IPs.
    5. Your webhook is ready!

You can also create this Webhook configuration via the :ref:`CLI (Casper) <cli>`, via :ref:`API <api>` or the Terraform provider.

Webhook integration on git provider
-----------------------------------

Goal: Automate deployment of a module on our test environment every time there's a new push on the dev branch of our git repository.

Go to repository settings - webhooks page on your Github or Bitbucket repository.

**GitHub settings**

.. figure:: /images/webhook_github.png

**Bitbucket settings**

.. figure:: /images/webhook_bitbucket.png
    :scale: 50 %

**Legend:**

    1. Paste URL we previously copied from Cloud Deploy,
    2. Select application/json,
    3. Empty if no secret token defined, otherwise the token defined in your configuration,
    4. We want to trigger the webhook on push events,
    5. Activate call history and add webhook

It is now ready! Every push on the dev branch of this repo will trigger a new deployment of our webapp module!
